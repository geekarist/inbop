plugins {
    id 'com.github.ben-manes.versions' version '0.15.0'
}

apply plugin: 'com.android.application'

static def loadProps(path) {
    def props = new Properties()
    props.load(new FileInputStream(path))
    return props
}

//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    defaultConfig {

        buildConfigField('String', 'PLACES_API_PATH', '"/geekarist/inbop-api/master/places.json"')

        def fbProps = loadProps('private/facebook.properties')
        buildConfigField('String', 'FACEBOOK_APP_ID', "\"${fbProps.get('app_id')}\"")
        buildConfigField('String', 'FACEBOOK_SECRET_KEY', "\"${fbProps.get('secret_key')}\"")

        applicationId "me.cpele.inbop"
        minSdkVersion 15
        targetSdkVersion 26
        versionName "0.1.0"
        versionCode 7
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        resConfigs "en", "fr"

        multiDexEnabled true

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

    buildTypes {

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled = true
        }
    }

    flavorDimensions 'api'

    productFlavors {

        // Standard development environment connected to remote dev backend
        development {
            dimension 'api'
            buildConfigField('String', 'PLACES_API_BASE_URL', '"https://inbop-api.cpele.me"')
            buildConfigField('String', 'PLACES_API_PATH', '"/places.json"')
            applicationId "me.cpele.inbop.dev"
        }

        // Specific development environment running in an emulator and connected to local backend
        offlineEmulation {
            dimension 'api'
            buildConfigField('String', 'PLACES_API_BASE_URL', '"http://10.0.2.2:8000"')
            buildConfigField('String', 'PLACES_API_PATH', '"/places.json"')
            applicationId "me.cpele.inbop.offline"
        }

        // Production environment connected to remote prod backend
        production {
            dimension 'api'
            buildConfigField('String', 'PLACES_API_BASE_URL', '"https://inbop-api.cpele.me"')
            buildConfigField('String', 'PLACES_API_PATH', '"/places.json"')
            applicationId "me.cpele.inbop.prod"
        }
    }

    lintOptions {
        warning 'InvalidPackage'
        return true
    }
}

def supportVersion = '26.0.1'

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:${supportVersion}"
    implementation "com.android.support:recyclerview-v7:${supportVersion}"
    implementation "com.android.support:cardview-v7:${supportVersion}"
    implementation "com.android.support:appcompat-v7:${supportVersion}"
    implementation "com.android.support:design:${supportVersion}"

    implementation "com.android.support.constraint:constraint-layout:1.1.0-beta1"

    implementation "com.android.support:multidex:1.0.2"

    implementation 'com.google.android.gms:play-services-maps:11.2.0'

    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    implementation 'com.github.bumptech.glide:glide:3.8.0'
    implementation 'com.google.code.gson:gson:2.8.1'

    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    implementation 'org.parceler:parceler-api:1.1.9'
    annotationProcessor 'org.parceler:parceler:1.1.9'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.8.47'

    androidTestCompile('com.android.support.test.espresso:espresso-core:3.0.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

// Task to disable animations on the device using a shell command
task disableAnimations(type: Exec, dependsOn: 'installDevelopmentDebug') {
    commandLine "adb shell settings put global window_animation_scale 0".split(" ")
}

// Make any connected* task depend on disableAnimations
tasks.whenTaskAdded { task ->
    if (System.getenv()['CI'] && task.name.startsWith('connected')) {
        task.dependsOn disableAnimations
    }
}
